SDM concept
Waterfall-самая старая разработка софта(водопаная модель)
Идет сверху-вниз
Этапы:
1. Анализ требований:собираются требования, 
люди общаются с бизнесом, команда пытается понять, что делать и как делать(чего хочет клиент)
В результате генерируем набор требований
2.Дизайн: Архитектура, база данных, поля, портотип
Не пишется никакого кода, делает общее решение
3. Разработка: кодинг(самый длинный этап)
4. Тестирование: планеруем тесты, подготавливаем тестовые данные, системы, где это будем делать
Делаем вывод качества продукта. (сравниваем требование и результат)
5. Поддержка: баг фикс, обноления, поддержка клиента и т.д.
Особенности(плюсы):
1. Очень простой.
2. Первая методология.
недостатки:
1. Очень дорого обходятся ошибки;
2. Тяжело сделать оценку стоимость и тиммейт;


Agile-доминирующая в современной разработке  
Ценности:
1. Люди и взаимодействие людей важнее, чем процесс;
2. Рабочий софт важнее документации;
3. Взаимодействие с клиентом важнее, чем контракт;(быть гибкими)
4. Реакция на изменения;
Набор принципов:
1. Выший приоритет - это удоволетворить заказчика с помощью раннего и перманентного доставка рабочего софта;
2. Изменения в требованиях приветствуется(должны реагировать на изменения)
3. Доставлять изменения часто(от недели до месяца)
4. Бизнес люди и разработчики должны работать вместе ежедневно; 
5. Нужно строить проект вокруг тех, кому это действительно важно. Поддерживать его и дать ему то, что нужно;
6. Самый эффективный способ комуникации это лицо к лицу;
7. Рабочий софт- мерило прогресса;
8. Agile процесс должен поддерживать устройчивую разработку; Должна быть четкая скорость работы;
9. Постоянно нужно уделять внимание хорошим техническим практикам и хорошему дизайну;
10. Простота важна.
11. САМООРГАНИЗУЮЩИЕСЯ КОМАНДЫ.
12. Команда должна работать эффективно и, когда она работает эффективно, можно вносить правки в процесс и менять ее поведение.

Scrum-популярный фреймворк построенный на философии Agile. Имеет четкие мероприятия, роли и элементы;
Концепт: Когда мы начинаем разработку у нас есть конкретный список требований. 
Список требований, то что мы хотим видеть в продукте - это product backlog;
Работа в Srum базируется на спринтах-короткий, фиксированный отрезок времени.
Нам нужно определить, что мы сможем сделать за спринт и  взять это на спринт; 
То что мы успеваем сделать за sprint мы добавляем в sprint backlog;
И в конце спринта у нас есть продукт, который мы можем выпускать;

Scrum Roles:
Scrum можно разделить на:
1. Роли (product owner, scrum master, development Team)
2. Мероприятия (Spint Retrospective, Sprint Review, Sprint Planning, Daily Scrum)
3. Артефакты(Product backlog(список того, что мы хотим) , sprint backlog(то что мы делать в рамках спринта), product increment(сам продукт))
4. Другое (Realease BurnDown, Tasks)

Scrum Roles: Product Owner - владелец продукта, обычно 1 человек со стороны бизнеса, который поставляет задания для разработчиков;
Он является ответственным человеком, который решает, что должно быть в продукте и он расставляет приоритеты;
Он отвечает за первоначальное планирование, говорит, что брать на спринт и управляет backlog;
Общается с основной командой;

Scrum Master - человек, который отвечает за scrum, один из разработчиков, который знает, как  хорошо работает скрам и способствует тому, 
чтобы все участники действовали по правилам скрама
Помогает Владельцу продукта и Команде с точки зрения процесса
Решает сложности, которые возникают

Development Team -команда, которая делает продукт. В скрам маленькая команда(5 человек)
Организованы самостоятельно и есть все необходимые кадры;
 
Scrum Event(мероприятия)
1. Sprint Grooming(backlog refinement)-Это мероприятия, когда мы выбираем, что у нас будет в спринте
Как он проходит:
1. Он происходит перед спринтом;
2. Команда уточняет задачи в спринте;
3. Задаем вопросы продуктологу;
4. думаем как это реализовать и протестировать.
---после груминка планинг--
2.Sprint Planning- обычно 1 день спринта;
Определяем, что конкретно будем делать во время спринта: 
1. разбиение больших задач, на маленькие подзадачки;
2. Оцениваем, сколько времени это займет;
Что происходит:
1. Мы начинаем с высокоприоритетных задач(стро);
2. Выбираем какие задачи(стори) будем делать в спринте
3. Разбиваем эти стори, на задачки, и определняем время
--дальше--
3. Daily scrum/ Stanup(10-15 min)-небольшое совещание, где мы делимся информацией со своей командой.
Каждый день команда собирается вместе и каждый говорит, кто что сделал и что планирует, сложности.
Scrum Master записывает, проблемы которые имеются и постарается их решить;
--дальше--
4. Sprint Review/Demо-В конце спринта, когда мы все сделали, мы делалем демо;
Мы демонстрируем, что мы сделали. Кто сделал - тот показывает. На демо получаем фитбэк от заказчика.
(его может и не быть, если у клиента нет времени);
--далее--
5. Sprint Retrospective - мы смотрим, что хорошо мы сделали хорошо, что можно улучшить, выделяем ответственного, 
кто ответственнен за улучшение и сроки.

Scrum Other elements:
Burndown chart - график по одной осей идет дни, по второй ресурсы/усилия;

-----
Kanban-нет жестких ролей и т.д.
Основной элемент это - board(доска), на которой находятся задачи, но нет никаких жестких правил
todo, dev, test, release, done; 
Почему Kanban:
1. Не нужно ничего планировать; 
2. Есть визуализация;
3. Очень легко начать. 
Для кого подходит Kanban:
1. Для поддержки.
2. Много изменений в бедлоге спринте;
3. У нас есть команда приходяще-уходящая;

-------
Extreme Programming(XP. экстремальное программирование)
Концепты(?):
1. Планирование Игры
2. Короткие релизы - делаем часто маленькие кусочки
3. Метафора - сложные вещи нужно объяснять простыми словами
4. Простой дизайн
5. Тестирование:unit test, automates test
6. Рефакторинг-улучшение организации кода, без изменения функционала 
7. Парное программирование - два программиста за одним компьютером(code review);
8. Коллективная собственность- любой разработчик может менять любую часть кода.
9. Непрерывная итеграция.
10. 40 часовая рабочая неделя
11. On-site customer - заказчик находится рядом
12. Должны использовать стандарты кодирования

-----
TDD Concept
Test Driven Development - сначала пишутся тесты, а потом пишем код.
Как работает:
1. Сначала пишем тесты, которые будут тестировать код. Эти тесты у нас падают(fall), 
поэтому наша задача в том, чтобы они заработали, 
после же преписываем код, дабы он был хорошо/понятно написан(red-green-refactor)
Зачем:
1. Программисту тяжело понять, где код может крашнутся;
Польза:
1. Читаемый/чистый код;
2. Легко изменять/переписывать(refactoring);
3. Снижает технический долг;
4. Меньше дефектов.
Минусы:
1. Тяжелее работать;

------
BDD
Classis flow(not-bdd) 
Бизнес заказчик обращается к Бизнес Аналитику, Бизнес Аналитик пишет требования, 
Требования попадают тестировщикам и разработчикам, разработчик сделал продукт, 
тестировщик проверяет все ли требования есть в продукте, 
после пишется техническая документация, и после все отдается заказчику.

BDD way
Бизнес заказчик обращается к Бизнес Аналитику,дальше заказчик и аналитик пишут сценарий на языке джаркен(?)
и один и тот же сценарий работает для всех, и получается продукт.  

Summary&Extras
Agile - это философия и принципы, но не дает четких инструкций, что делать 
Kanban, Scrum - это фреймворки в которых есть инструкция, что делать
xp -  это практика, TDD и BDD, и они могут быть связаны с Scrum or Kanban 